pipeline {
  agent any
  environment {
    // DOCKER_REGISTRY = "docker.io"
    DOCKER_HUB_REPO = "prarthanaus0597"
    registryCredential = 'dockerCredential'
    CMS_GITHUB_REPO = "https://github.com/KARISHMA21/SPE-CMS-SERVICE"
    ADMIN_GITHUB_REPO = "https://github.com/KARISHMA21/SPE-Admin-SERVICE"
  }
stages {
     stage('Git Clone') {
      steps {
          dir('SPE-CMS-SERVICE'){
        git branch: 'master', url: CMS_GITHUB_REPO,credentialsId: 'gitcred'
        
          }
          dir('SPE-ADMIN-SERVICE') {
        git branch: 'master', url: ADMIN_GITHUB_REPO,credentialsId: 'gitcred'
          }
      }
    } 
    
    
    stage('Build and Push CMS Image') {
      steps {
        dir('SPE-CMS-SERVICE') {
            sh 'mvn clean install'    
            // sh 'docker build -t ${DOCKER_REGISTRY}/${DOCKER_HUB_REPO}/spring-boot-app .'
            // withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
            // sh 'docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD ${DOCKER_REGISTRY}'
            // sh 'docker push ${DOCKER_REGISTRY}/${DOCKER_HUB_REPO}/spring-boot-app'
             script {
                CMSservicedockerImage = docker.build DOCKER_HUB_REPO + "/cms-service:1.0"
                docker.withRegistry( '', registryCredential ) {
                CMSservicedockerImage.push()
        }
          }
        }
      }
    }
    stage('Build and Push Admin Image') {
      steps {
        dir('SPE-ADMIN-SERVICE') {
            sh 'mvn clean install'    
            // sh 'docker build -t ${DOCKER_REGISTRY}/${DOCKER_HUB_REPO}/spring-boot-app .'
            // withCredentials([usernamePassword(credentialsId: 'docker-hub', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
            // sh 'docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD ${DOCKER_REGISTRY}'
            // sh 'docker push ${DOCKER_REGISTRY}/${DOCKER_HUB_REPO}/spring-boot-app'
             script {
                AdminservicedockerImage = docker.build DOCKER_HUB_REPO + "/admin-service:1.0"
                docker.withRegistry( '', registryCredential ) {
                AdminservicedockerImage.push()
        }
          }
        }
      }
    }
    }

  }

